<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Website of Harry Yang</title>
    <link>https://yanghairui.life/tags/golang/</link>
    <description>Recent content in golang on Website of Harry Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Jul 2021 19:28:17 +0800</lastBuildDate><atom:link href="https://yanghairui.life/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang实现单例模式</title>
      <link>https://yanghairui.life/posts/golang%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Tue, 13 Jul 2021 19:28:17 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/golang%E5%8D%95%E4%BE%8B/</guid>
      
        <description>单例模式 单例模式是保证一个类，确保在一个系统中永远只有一个实例。在go中，就是保证一个结构体，永远只有一个实例化的对象。
当一个应用程序中某个对象需要是全局唯一的，就要使用单例模式。单例模式常用在以下场景中：
 配置类 日志类 必须要以共享模式访问的资源类 需要频繁的创建和删除对象，而对象又可以复用的场景  单例模式不适用的场景：</description>
      
    </item>
    
    <item>
      <title>Golang编程模式：functional options</title>
      <link>https://yanghairui.life/posts/golang%E7%9A%84option%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 12 Jul 2021 19:28:17 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/golang%E7%9A%84option%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      
        <description>配置选项问题 当我们需要创建一个对象时，往往需要对这个对象的某些成员参数进行配置，比如下面这个结构体：
type Server struct { Addr string Port int Protocol string Timeout time.</description>
      
    </item>
    
    <item>
      <title>k8s的Informer机制</title>
      <link>https://yanghairui.life/posts/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 12 Mar 2021 23:55:43 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</guid>
      
        <description>Client-go client-go与其他语言版本的k8s不同的地方在于，它不仅仅是一个k8s的客户端，而且还是k8s的核心库，k8s中各个组件与api-server之间的通信都是通过client-go的iformer机制实现的快速低延迟的数据同步。kubernetes中的各个组件和api-server之间都是通过http通信，那么需要非常高的可靠性，时效性。核心就是使用了client-go的informer机制。
Informer机制 下图是client-go中Informer机制的架构图：
最外层是一个Informer，可以看到所有功能都被封装到了Informer中，通过Informer与kube-apiserver通信，实现对API资源的list/watch，Informer也可以连接用户定义的eventHandler对捕获到的某些事件进行处理，还可以将watch到的更新，输出到外部，比如存到本地数据库等等。
Informer的三个组成部分 Reflector 如上图，Reflector包含一个通过clientset实现的ListerWatcher对象和一个Store对象，Reflector会通过ListerWatcher方法对api-server进行watch，通过比对resourceVersion来捕获API资源的变化，然后送入store。store是一个FIFO Queue(先入先出队列)。
FIFO Queue的实现者为DeltaFIFO，store是一个内存级的缓存，存储捕获到的变更，对Store提供了pop()方法，就实现了一个Queue。</description>
      
    </item>
    
  </channel>
</rss>