<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Website of Harry Yang</title>
    <link>https://yanghairui.life/tags/golang/</link>
    <description>Recent content in golang on Website of Harry Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Oct 2021 20:01:29 +0800</lastBuildDate><atom:link href="https://yanghairui.life/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang的mutex底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84mutex%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 14 Oct 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84mutex%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>互斥锁 互斥锁的数据结构 互斥锁是并发程序中对一个共享资源进行访问控制的常用手段，Golang中提供了mutex作为互斥锁的实现。mutex的数据结构如下：
// 定义在src/sync/mutex.go  type Mutex struct{ state int32 sema uint32 } 包括两个字段：</description>
      
    </item>
    
    <item>
      <title>Golang的channel底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 18 Sep 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>Channel的底层数据结构 channel是golang在语言层面提供的goroutine通信机制，也是我们经常使用的数据结构，它的数据结构如下：
// 在src/runtime/chan.go中定义  type hchan struct{ // 环形队列相关  qcount uint // 当前队列中剩余元素的个数  dataqsiz uint // 环形队列的长度，即可以存放的元素个数  buf unsafe.</description>
      
    </item>
    
    <item>
      <title>Golang的指针和内存对齐</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 20 Aug 2021 19:34:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      
        <description>指针 golang中的指针种类 golang的指针类型分为三种，*类型，unsafe.Pointer，uintptr。
 *类型：普通指针类型，用于传递对象地址，不能进行指针运算。 unsafe.Pointer：通用指针类型，用于转换不同类型的指针，不能进行指针运算，不能读取内存存储的值，必须要转换到某一类型的普通指针。 uintptr：用于指针运算，GC不把uintptr当指针，uintptr无法持有对象，uintptr类型的目标会被回收。  通过以上就可以看出：
 unsafe.</description>
      
    </item>
    
    <item>
      <title>CPU的多级缓存和cache line</title>
      <link>https://yanghairui.life/post/cpu%E7%9A%84%E7%BC%93%E5%AD%98%E8%A1%8C/</link>
      <pubDate>Sun, 15 Aug 2021 19:34:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/cpu%E7%9A%84%E7%BC%93%E5%AD%98%E8%A1%8C/</guid>
      
        <description>CPU的多级缓存 随着计算机进入多核时代，CPU处理速度和内存之间的鸿沟越来越大，因此多核CPU都通过缓存行提高CPU和内存的交互效率。
CPU根据型号不同都会有三层以上的缓存行：
如上图，是一个CPU的典型架构，共有三级缓存
 L1缓存：一般都是分成指令缓存，和数据缓存，分开放。 L2缓存：从L2缓存开始部分指令和数据，L1和L2缓存都是在一个真实的核中的。 L3缓存：从L3开始，往往都是一颗CPU中所有核心共享的。  这三级缓存也是离CPU越远的速度越慢：</description>
      
    </item>
    
    <item>
      <title>Golang中的defer、select和range的底层原理</title>
      <link>https://yanghairui.life/post/deferselect%E5%92%8Crange%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 19:34:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/deferselect%E5%92%8Crange%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      
        <description>Defer defer语句用于延迟函数的调用，每次defer都会把一个函数压入栈中，当前函数返回前，再把延迟的函数取出来并执行，所以多个defer语句是后写的先执行的。
几个题目 问题1：以下输出什么？ func deferFuncParameter() { var aInt = 1 defer fmt.</description>
      
    </item>
    
    <item>
      <title>Golang的map底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84map%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 14 Jul 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84map%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>Map的底层数据结构 Golang的map数据类型底层使用的是哈希表实现，一个哈希表可以有多个哈希表节点，即bucket，一个bucket保存着map中的一个或者一组键值对。
hmap的数据结构： map的实现实际上就是runtime包里的hmap：
// 定义在src/runtime/map.go中  type hmap struct{ count int // 当前保存的元素个数  .</description>
      
    </item>
    
    <item>
      <title>Golang实现单例模式</title>
      <link>https://yanghairui.life/post/golang%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Tue, 13 Jul 2021 19:28:17 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E5%8D%95%E4%BE%8B/</guid>
      
        <description>单例模式 单例模式是保证一个类，确保在一个系统中永远只有一个实例。在go中，就是保证一个结构体，永远只有一个实例化的对象。
当一个应用程序中某个对象需要是全局唯一的，就要使用单例模式。单例模式常用在以下场景中：
 配置类 日志类 必须要以共享模式访问的资源类 需要频繁的创建和删除对象，而对象又可以复用的场景  单例模式不适用的场景：</description>
      
    </item>
    
    <item>
      <title>Golang编程模式：functional options</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84option%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 12 Jul 2021 19:28:17 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84option%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      
        <description>配置选项问题 当我们需要创建一个对象时，往往需要对这个对象的某些成员参数进行配置，比如下面这个结构体：
type Server struct { Addr string Port int Protocol string Timeout time.</description>
      
    </item>
    
    <item>
      <title>K8s的RBAC权限控制机制</title>
      <link>https://yanghairui.life/post/k8s%E7%9A%84rbac%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 25 Jun 2021 23:55:43 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/k8s%E7%9A%84rbac%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</guid>
      
        <description>RBAC(Role-Based Access Control) 基于角色的权限控制，其实只有三个最基本的概念：
 Role：角色，每个角色都定义了一组对k8s API对象的操作权限，就是一系列权限的集合 Subject：权限被作用者，即Role提供的权限要作用到的用户，人，或机器 RoleBinding：通过RoleBinding把Role和Subject绑定到一起  总之，就是通过Role来定义权限，通过Subject来认证，通过RoleBinding将Role和Subject绑定到一起，那么Subject即可拥有Role所定义的权限了。</description>
      
    </item>
    
    <item>
      <title>k8s的Informer机制</title>
      <link>https://yanghairui.life/post/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 12 May 2021 23:55:43 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</guid>
      
        <description>Client-go client-go与其他语言版本的k8s不同的地方在于，它不仅仅是一个k8s的客户端，而且还是k8s的核心库，k8s中各个组件与api-server之间的通信都是通过client-go的iformer机制实现的快速低延迟的数据同步。kubernetes中的各个组件和api-server之间都是通过http通信，那么需要非常高的可靠性，时效性。核心就是使用了client-go的informer机制。
Informer机制 下图是client-go中Informer机制的架构图：
最外层是一个Informer，可以看到所有功能都被封装到了Informer中，通过Informer与kube-apiserver通信，实现对API资源的list/watch，Informer也可以连接用户定义的eventHandler对捕获到的某些事件进行处理，还可以将watch到的更新，输出到外部，比如存到本地数据库等等。
Informer的三个组成部分 Reflector 如上图，Reflector包含一个通过clientset实现的ListerWatcher对象和一个Store对象，Reflector会通过ListerWatcher方法对api-server进行watch，通过比对resourceVersion来捕获API资源的变化，然后送入store。store是一个FIFO Queue(先入先出队列)。
FIFO Queue的实现者为DeltaFIFO，store是一个内存级的缓存，存储捕获到的变更，对Store提供了pop()方法，就实现了一个Queue。</description>
      
    </item>
    
    <item>
      <title>Golang的slice底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84slice%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 05 May 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84slice%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>Slice的底层数据结构 Golang的slice切片依托于数组实现，和数组的差别就是slice可以方便的扩容，实际使用中除了在少数情况我们明确知道数组长度时，大多数时候都是用的是slice，因为不用担心容量不够的问题。但是如果不了解它内部的实现机制，就有可能会遭遇一些莫名的现象。
slice底层结构：
// 源码位于src/runtime/slice.gotype slice struct{array unsafe.Pointerlen intcap int}array是一个unsafe.</description>
      
    </item>
    
  </channel>
</rss>