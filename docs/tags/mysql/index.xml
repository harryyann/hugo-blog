<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Website of Harry Yang</title>
    <link>https://yanghairui.life/tags/mysql/</link>
    <description>Recent content in MySQL on Website of Harry Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Feb 2022 13:26:00 +0800</lastBuildDate><atom:link href="https://yanghairui.life/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL的ORDER BY语句的工作方式</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E6%8E%92%E5%BA%8F%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 20 Feb 2022 13:26:00 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E6%8E%92%E5%BA%8F%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/</guid>
      
        <description>在日常开发应用时，经常会碰到根据某个字段排序后显示结果，那么 MySQL 底层对这种需要排序的查询到底是怎么处理的呢？
首先我们构造一张表：
CREATE TABLE `t` (  `id` int(11) NOT NULL,  `city` varchar(16) NOT NULL,  `name` varchar(16) NOT NULL,  `age` int(11) NOT NULL,  `addr` varchar(128) DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `city` (`city`) ) ENGINE=InnoDB; 这个表有 id、city、name、age等几个字段，主键是 id，city 字段创建了普通索引。</description>
      
    </item>
    
    <item>
      <title>分库分表的实现方式</title>
      <link>https://yanghairui.life/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 30 Sep 2021 17:56:02 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
      
        <description>分库分表 数据库的数据量增大会直接影响读写的性能，比如一次查询操作，扫描 5 万条数据和 500 万条数据，查询速度肯定是不同的。分库分表就是把一个表拆分成多个库的多个表，这些表可以在同一个服务器上，也可以在不同的服务器上，总而言之，就是要通过拆分，减小单库单表的读写压力。
那么什么时候才需要分库分表呢？
参考阿里巴巴的《Java 开发手册》中数据库部分的建表规约： **单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。**由于不同的服务器配置、数据的存储结构都不同，所以这个数据并不确切，但可以作为一个参考。</description>
      
    </item>
    
    <item>
      <title>InnoDB的非锁定一致性读</title>
      <link>https://yanghairui.life/post/innodb%E7%9A%84%E9%9D%9E%E9%94%81%E5%AE%9A%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</link>
      <pubDate>Mon, 07 Jun 2021 17:18:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/innodb%E7%9A%84%E9%9D%9E%E9%94%81%E5%AE%9A%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</guid>
      
        <description>非锁定一致性读 在《MySQL的锁》这篇文章中我介绍了MySQL的锁定一致性读，即通过加锁的方式来保证读取数据的正确性。而为了提高效率，InnoDB还实现了非锁定的一致性读，即读取操作不需要等待行锁的释放就可以完成数据读取，提高读的效率。这也是InnoDB默认的读取方式。
实现方式 InnoDB通过版本控制的方式读取当前执行时间数据库中的快照数据，快照数据是指该行之前版本的数据，如上图所示，当要读取的数据被加了X锁时，可以不等到锁释放，而是直接读取数据旧版本的快照，即可实现一致性读。而在不同的事务隔离级别下，读取数据的版本也不同，这就是行多版本技术，由此带来的并发控制，就是多版本并发控制（Multi Version Concurrency Control，MVCC）。
MVCC MVCC是一种概念，很多数据库都有自己的实现，而InnoDB的实现方式是结合自己的undo log和在表中增加了两个隐藏的字段实现的。</description>
      
    </item>
    
    <item>
      <title>MySQL的锁</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E9%94%81/</link>
      <pubDate>Sun, 06 Jun 2021 17:08:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E9%94%81/</guid>
      
        <description>数据库的锁 锁的作用就是确保每一个用户都能以一致的方式读取和写入数据。MySQL中的锁分为两种：闩锁latch和lock锁。
  latch：轻量级的锁，用于锁定mysql应用程序中的一些对象，要求锁定的时间必须非常短，mysql中分为mutex（互斥锁）和rwlock（读写锁），是应用程序级别的，就是我们在程序中使用的mutex和rwmutex。通过命令show engine innodb mutex可以查看，一般mysql的开发人员会关注。
通过命令show engine innodb mutex可以观察当前数据库中的latch信息。</description>
      
    </item>
    
    <item>
      <title>redo log的两阶段提交</title>
      <link>https://yanghairui.life/post/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Sat, 08 May 2021 07:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid>
      
        <description>WAL技术 WAL(Write-Ahead Logging)，就是先些日志，再写磁盘。
当我们向MySQL更新一条记录的时候，InnoDB存储引擎就会把记录顺序的写到redo log中，然后更新InnoDB的buffer pool，并不更新磁盘中的数据页，然后这次更新操作就算是完成了，之后InnoDB存储引擎就会在它有空的时候，把redo log中记录的记录刷到磁盘上的数据页中完成最终的持久化。
由于磁盘的顺序写入效率要远高于随机写入，并且还有组提交等优化，这种方式可以大大提高数据更新时的效率。
关于磁盘的顺序写入，需要注意一下。不是说打开一个文件之后append就是顺序写入了。顺序写入需要知道磁盘上要写入的位置，直接操作磁盘，向某个特定的地址写入，顺序写入时，磁盘的磁头不需要移动就可以直接写入，这样才有效率的提升。 Redo log Redo log是Innodb存储引擎提供的用于优化更新操作的日志。它的结构可以看成是个环形的磁盘区域。</description>
      
    </item>
    
    <item>
      <title>Innodb存储引擎的特性</title>
      <link>https://yanghairui.life/post/innodb%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 07 May 2021 14:59:14 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/innodb%E7%89%B9%E6%80%A7/</guid>
      
        <description>InnoDB存储引擎的体系架构 InnoDB存储引擎的体系架构大致如下图所示，可以看到主要包含了一系列后台线程，和一个大的缓冲池。最底层则是文件系统。
InnoDB的线程模型 InnoDB的线程主要分为Master线程、IO线程、Purge线程和Page Cleaner线程。
Master 线程 是核心的后台线程，主要负责调度其他线程，以及脏页的刷新，undo页的回收，redo log的刷新，合并缓冲区等。（版本不同做的工作不一样）
IO线程 innodb中大量使用了AIO（异步IO）来处理写请求，以提高性能，IO线程用于处理这些IO操作的回调。</description>
      
    </item>
    
    <item>
      <title>MySQL的复制</title>
      <link>https://yanghairui.life/post/mysql%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 06 May 2021 17:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E5%A4%8D%E5%88%B6/</guid>
      
        <description>复制 复制是让一台服务器的数据和其他服务器保持同步。MySQL的复制是通过binlog实现的，binlog有三种类型：
 statement：记录的就是SQL语句，优点是人类可读，并且占用空间较小，但是基于该类型binlog的复制可能会产生不一致，比如执行某个特定函数，在复制后的结果可能和之前不一样。 raw：记录的是具体的每一行的变化细节，可以保证复制的正确性，保证数据一致，但是一行一行的记录占用空间较大。实际使用中采用raw的比较多。 mixed：是statement和raw的结合，一般的语句修改都采用statement格式保存，当碰到一些可能引起复制不一致的函数时，改为采用raw保存。这样既能缩小日志占用空间，也可以保证复制的数据一致性。  复制的过程  主库产生binlog 备库的IO线程，请求主库的binlog，并将binlog保存到自己本地的中继日志relay log中 备库的sql线程读取relay log，通过重放relay log完成复制  后续会进行详细说明，大体的过程如下图：</description>
      
    </item>
    
    <item>
      <title>MySQL的事务</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Thu, 06 May 2021 12:10:47 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</guid>
      
        <description>事务的特性 事务就是一组原子性的SQL语句。这一组SQL语句要么全部执行成功，要么全部不执行。只要有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。事务处理系统需要包含以下四个特性(ACID)：
 原子性(atomicity)  一个事务必须被看作是不可分割的最小工作单元。不可能执行成功其中的一部分操作，要么全部提交成功，要么全部失败回滚，不能存在部分成功部分失败的状态。
 一致性(consistency)  数据库总是从一个一致性的状态，转换到另一个一致性的状态。</description>
      
    </item>
    
    <item>
      <title>MySQL的索引</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 20 Apr 2021 17:39:38 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      
        <description>数据库索引 索引是一种数据结构，可以为不同的场景提供更好的性能。对于数据库来说，索引的功能就是提高数据查询的效率，但同时不可避免的也会增加数据写入的消耗，二者之间需要一个平衡，只要当查询带来的好处远远大于写入时的额外工作时，索引才是有意义的。
数据库表建立索引的主要优势：
 大大减少服务器需要扫描的数据量 索引可以帮助服务器避免排序和临时表 索引可以将随机IO变为顺序IO  常见的索引数据结构   哈希表：</description>
      
    </item>
    
    <item>
      <title>MySQL的架构和语句执行过程</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Thu, 08 Apr 2021 12:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid>
      
        <description>MySQL的整体架构图 如上图所示，整体上看MySQL分成上下两层，上面那层是Server层，下面是存储引擎层。
Server层包含了连接器、查询缓存、解析器、优化器、执行器(有的资料中说有)等组件，，主要负责的是跨存储引擎的功能，如存储过程、触发器、视图等，内置函数也是在Server层提供的。
存储引擎层则是MyISAM、InnoDB、Memory等各种存储引擎，以插件式集成，负责数据的读写。
连接器 用于和客户端建立连接，并维持和管理连接。并在连接建立时查询用户的权限表获取到该用户的所有权限，建立连接的过程大概如下：
 首先进行TCP握手，建立TCP连接 然后进行身份认证，这一步会查询MySQL的权限表，通过后会从权限表中拿到用户的所有权限，并保存在这个连接中，后续的所有权限判断，都是基于这次查询得到的权限数据，不会再去查权限表了 通过用户的身份认证之后，连接就建立起来了  通过命令show processlist可以观察当前数据库的所有连接：</description>
      
    </item>
    
  </channel>
</rss>