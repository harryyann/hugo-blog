<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内存 on Website of Harry Yang</title>
    <link>https://yanghairui.life/tags/%E5%86%85%E5%AD%98/</link>
    <description>Recent content in 内存 on Website of Harry Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Feb 2022 18:35:14 +0800</lastBuildDate><atom:link href="https://yanghairui.life/tags/%E5%86%85%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang的内存分配原理</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Mon, 21 Feb 2022 18:35:14 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      
        <description>程序运行中的堆和栈 一个程序在运行中占用的内存分为以下几部分：
 栈stack：系统自动分配，存放函数的参数值，局部变量和方法调用，操作方法和数据结构中的栈类似，有栈容量，会出现溢栈现象。 堆heap：一般由程序员分配释放，程序员不释放就由OS释放（通过语言的GC），和数据结构中的堆不同，分配方式类似于链表。 全局区(静态区)static：全局变量和静态变量的存储，经过初始化的在一块区域，未初始化的在另一区域。 文字常量区：常量字符串存在这里。 程序代码区：函数体的二进制代码。  操作系统把磁盘上的可执行文件加载到内存之前，会把可执行文件中的代码，数据放在内存中合适的位置上，分配好堆栈，所有准备工作完成后程序才可以运行。内存布局如下所示：</description>
      
    </item>
    
  </channel>
</rss>