<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Website of Harry Yang</title>
    <link>https://yanghairui.life/</link>
    <description>Recent content on Website of Harry Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 06 Mar 2022 17:42:42 +0800</lastBuildDate><atom:link href="https://yanghairui.life/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis缓存击穿、雪崩和穿透</title>
      <link>https://yanghairui.life/post/redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E9%9B%AA%E5%B4%A9%E5%92%8C%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Sun, 06 Mar 2022 17:42:42 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E9%9B%AA%E5%B4%A9%E5%92%8C%E7%A9%BF%E9%80%8F/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Mysql性能优化的一般分析思路和常见tips</title>
      <link>https://yanghairui.life/post/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E8%88%AC%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF%E5%92%8C%E5%B8%B8%E8%A7%81tips/</link>
      <pubDate>Sun, 06 Mar 2022 17:41:44 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E8%88%AC%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF%E5%92%8C%E5%B8%B8%E8%A7%81tips/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>性能优化的分析思路</title>
      <link>https://yanghairui.life/post/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Sun, 06 Mar 2022 17:38:15 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</guid>
      
        <description>如何评判一个系统的性能  Throughput  吞吐量
 Latency  请求耗时
 ErrorRate  错误率</description>
      
    </item>
    
    <item>
      <title>性能优化的分析思路</title>
      <link>https://yanghairui.life/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Sun, 06 Mar 2022 17:38:15 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</guid>
      
        <description>系统性能的定义   Throughput：吞吐量
  Latency：请求耗时
  Error rate：错误率</description>
      
    </item>
    
    <item>
      <title>Golang的内存对齐和内存逃逸</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%92%8C%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</link>
      <pubDate>Sun, 06 Mar 2022 17:36:10 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%92%8C%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Golang的map底层原理</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84map%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 06 Mar 2022 17:35:55 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84map%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Golang的string底层原理</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84string%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 06 Mar 2022 17:35:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84string%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Golang的defer以及range和select的底层原理</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84defer%E4%BB%A5%E5%8F%8Arange%E5%92%8Cselect%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 06 Mar 2022 17:35:31 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84defer%E4%BB%A5%E5%8F%8Arange%E5%92%8Cselect%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Golang的mutex底层原理</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84mutex%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 06 Mar 2022 17:35:03 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84mutex%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Golang的options编程模式</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84options%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 06 Mar 2022 17:34:33 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84options%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Redis数据结构——字符串</title>
      <link>https://yanghairui.life/post/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sun, 06 Mar 2022 17:34:00 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Redis布隆过滤器介绍</title>
      <link>https://yanghairui.life/post/redis%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 06 Mar 2022 17:33:40 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BB%8B%E7%BB%8D/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Redis哨兵机制</title>
      <link>https://yanghairui.life/post/redis%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 06 Mar 2022 17:33:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Redis持久化机制</title>
      <link>https://yanghairui.life/post/redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 06 Mar 2022 17:12:19 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Redis的集群模式</title>
      <link>https://yanghairui.life/post/redis%E7%9A%84%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 06 Mar 2022 17:12:05 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E7%9A%84%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Redis的地理位置坐标数据类型介绍</title>
      <link>https://yanghairui.life/post/redis%E7%9A%84%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E5%9D%90%E6%A0%87%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 06 Mar 2022 17:11:50 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E7%9A%84%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E5%9D%90%E6%A0%87%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>缓存和数据库的双写一致性</title>
      <link>https://yanghairui.life/post/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Sun, 06 Mar 2022 17:11:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>分布式锁的实现方式汇总</title>
      <link>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sun, 06 Mar 2022 17:10:59 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Raft算法介绍</title>
      <link>https://yanghairui.life/post/raft%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 06 Mar 2022 17:10:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/raft%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Redolog和两阶段提交</title>
      <link>https://yanghairui.life/post/redolog%E5%92%8C%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Sun, 06 Mar 2022 17:10:21 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redolog%E5%92%8C%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Mysql复制</title>
      <link>https://yanghairui.life/post/mysql%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Sun, 06 Mar 2022 17:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E5%A4%8D%E5%88%B6/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Innodb存储引擎特性</title>
      <link>https://yanghairui.life/post/innodb%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sun, 06 Mar 2022 17:09:16 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/innodb%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Mysql的锁</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E9%94%81/</link>
      <pubDate>Sun, 06 Mar 2022 17:08:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E9%94%81/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>微服务概览</title>
      <link>https://yanghairui.life/post/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 06 Jan 2022 17:37:07 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/</guid>
      
        <description>Reference 微服务的演进过程 单体应用 单体应用时代有两个主流流派
 LAMP：Linux系统 + Apache/Nginx服务器 + MySQL数据库 + 一种脚本语言，比如PHP，Python，Ruby或者NodeJS。  </description>
      
    </item>
    
    <item>
      <title>微服务概览</title>
      <link>https://yanghairui.life/posts/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 06 Jan 2022 17:37:07 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/</guid>
      
        <description>微服务的演进过程 单体应用 单体应用时代有两个主流流派：
 LAMP架构：Linux系统 + Apache/Nginx服务器 + MySQL数据库 + 一种脚本语言，比如PHP，Python，Ruby，Perl等。特点是轻量级，价格低，跨平台，并且十分易于开发。 MVC架构：Model-View-Controller，例如Spring + IBatis/Hibernate + Tomcat。它有较低的耦合性，可重用性高，且部署快速的特点。  单体应用架构的优点：</description>
      
    </item>
    
    <item>
      <title>InnoDB的非锁定一致性读</title>
      <link>https://yanghairui.life/posts/innodb%E7%9A%84%E9%9D%9E%E9%94%81%E5%AE%9A%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</link>
      <pubDate>Mon, 07 Jun 2021 17:18:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/innodb%E7%9A%84%E9%9D%9E%E9%94%81%E5%AE%9A%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</guid>
      
        <description>非锁定一致性读 在《MySQL的锁》这篇文章中我介绍了MySQL的锁定一致性读，即通过加锁的方式来保证读取数据的正确性。而为了提高效率，InnoDB还实现了非锁定的一致性读，即读取操作不需要等待行锁的释放就可以完成数据读取，提高读的效率。这也是InnoDB默认的读取方式。
实现方式 InnoDB通过版本控制的方式读取当前执行时间数据库中的快照数据，快照数据是指该行之前版本的数据，如上图所示，当要读取的数据被加了X锁时，可以不等到锁释放，而是直接读取数据旧版本的快照，即可实现一致性读。而在不同的事务隔离级别下，读取数据的版本也不同，这就是行多版本技术，由此带来的并发控制，就是多版本并发控制（Multi Version Concurrency Control，MVCC）。
MVCC MVCC是一种概念，很多数据库都有自己的实现，而InnoDB的实现方式是结合自己的undo log和在表中增加了两个隐藏的字段实现的。</description>
      
    </item>
    
    <item>
      <title>MySQL的锁</title>
      <link>https://yanghairui.life/posts/mysql%E7%9A%84%E9%94%81/</link>
      <pubDate>Sun, 06 Jun 2021 17:08:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/mysql%E7%9A%84%E9%94%81/</guid>
      
        <description>数据库的锁 锁的作用就是确保每一个用户都能以一致的方式读取和写入数据。MySQL中的锁分为两种：闩锁latch和lock锁。
  latch：轻量级的锁，用于锁定mysql应用程序中的一些对象，要求锁定的时间必须非常短，mysql中分为mutex（互斥锁）和rwlock（读写锁），是应用程序级别的，就是我们在程序中使用的mutex和rwmutex。通过命令show engine innodb mutex可以查看，一般mysql的开发人员会关注。
通过命令show engine innodb mutex可以观察当前数据库中的latch信息。</description>
      
    </item>
    
    <item>
      <title>MySQL的两阶段提交</title>
      <link>https://yanghairui.life/posts/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Sat, 08 May 2021 07:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid>
      
        <description>WAL技术 WAL(Write-Ahead Logging)，就是先些日志，再写磁盘。
当我们向MySQL更新一条记录的时候，InnoDB存储引擎就会把记录顺序的写到redo log中，然后更新InnoDB的buffer pool，并不更新磁盘中的数据页，然后这次更新操作就算是完成了，之后InnoDB存储引擎就会在它有空的时候，把redo log中记录的记录刷到磁盘上的数据页中完成最终的持久化。
由于磁盘的顺序写入效率要远高于随机写入，并且还有组提交等优化，这种方式可以大大提高数据更新时的效率。
关于磁盘的顺序写入，需要注意一下。不是说打开一个文件之后append就是顺序写入了。顺序写入需要知道磁盘上要写入的位置，直接操作磁盘，向某个特定的地址写入，顺序写入时，磁盘的磁头不需要移动就可以直接写入，这样才有效率的提升。Redo log Redo log是Innodb存储引擎提供的用于优化更新操作的日志。它的结构可以看成是个环形的磁盘区域。</description>
      
    </item>
    
    <item>
      <title>Innodb存储引擎的特性</title>
      <link>https://yanghairui.life/posts/innodb%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 07 May 2021 14:59:14 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/innodb%E7%89%B9%E6%80%A7/</guid>
      
        <description>InnoDB存储引擎的体系架构 InnoDB存储引擎的体系架构大致如下图所示，可以看到主要包含了一系列后台线程，和一个大的缓冲池。最底层则是文件系统。
InnoDB的线程模型 InnoDB的线程主要分为Master线程、IO线程、Purge线程和Page Cleaner线程。
Master 线程 是核心的后台线程，主要负责调度其他线程，以及脏页的刷新，undo页的回收，redo log的刷新，合并缓冲区等。（版本不同做的工作不一样）
IO线程 innodb中大量使用了AIO（异步IO）来处理写请求，以提高性能，IO线程用于处理这些IO操作的回调。</description>
      
    </item>
    
    <item>
      <title>MySQL的复制</title>
      <link>https://yanghairui.life/posts/mysql%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 06 May 2021 17:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/mysql%E5%A4%8D%E5%88%B6/</guid>
      
        <description>复制 复制是让一台服务器的数据和其他服务器保持同步。MySQL的复制是通过binlog实现的，binlog有三种类型：
 statement：记录的就是SQL语句，优点是人类可读，并且占用空间较小，但是基于该类型binlog的复制可能会产生不一致，比如执行某个特定函数，在复制后的结果可能和之前不一样。 raw：记录的是具体的每一行的变化细节，可以保证复制的正确性，保证数据一致，但是一行一行的记录占用空间较大。实际使用中采用raw的比较多。 mixed：是statement和raw的结合，一般的语句修改都采用statement格式保存，当碰到一些可能引起复制不一致的函数时，改为采用raw保存。这样既能缩小日志占用空间，也可以保证复制的数据一致性。  复制的过程  主库产生binlog 备库的IO线程，请求主库的binlog，并将binlog保存到自己本地的中继日志relay log中 备库的sql线程读取relay log，通过重放relay log完成复制  后续会进行详细说明，大体的过程如下图：</description>
      
    </item>
    
    <item>
      <title>MySQL事务详解</title>
      <link>https://yanghairui.life/posts/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Tue, 04 May 2021 22:10:47 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</guid>
      
        <description>事务 事务就是一组原子性的SQL语句。这一组SQL语句要么全部执行成功，要么全部不执行。只要有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。事务处理系统需要包含以下四个特性(ACID)：
 原子性(atomicity)  一个事务必须被看作 是不可分割的最小工作单元。不可能执行成功其中的一部分操作，要么全部提交成功，要么全部失败回滚。
 一致性(consistency)  数据库总是从一个一致性的状态，转换到另一个一致性的状态。</description>
      
    </item>
    
    <item>
      <title>MySQL的索引数据结构</title>
      <link>https://yanghairui.life/posts/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 20 Apr 2021 17:39:38 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>MySQL的架构和语句执行过程</title>
      <link>https://yanghairui.life/posts/mysql%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Thu, 08 Apr 2021 12:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/mysql%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid>
      
        <description>MySQL的整体架构图 &#34;
如上图所示，整体上看MySQL分成上下两层，上面那层是Server层，下面是存储引擎层。
Server层包含了连接器、查询缓存、解析器、优化器、执行器(有的资料中说有)等组件，，主要负责的是跨存储引擎的功能，如存储过程、触发器、视图等，内置函数也是在Server层提供的。
存储引擎层则是MyISAM、InnoDB、Memory等各种存储引擎，以插件式集成，负责数据的读写。
连接器 用于和客户端建立连接，并维持和管理连接。并在连接建立时查询用户的权限表获取到该用户的所有权限，建立连接的过程大概如下：
 首先进行TCP握手，建立TCP连接 然后进行身份认证，这一步会查询MySQL的权限表，通过后会从权限表中拿到用户的所有权限，并保存在这个连接中，后续的所有权限判断，都是基于这次查询得到的权限数据，不会再去查权限表了 通过用户的身份认证之后，连接就建立起来了  通过命令show processlist可以观察当前数据库的所有连接：</description>
      
    </item>
    
    <item>
      <title>编写Makefile</title>
      <link>https://yanghairui.life/posts/%E5%AD%A6%E4%B9%A0%E7%BC%96%E5%86%99makefile/</link>
      <pubDate>Thu, 25 Mar 2021 20:45:07 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/%E5%AD%A6%E4%B9%A0%E7%BC%96%E5%86%99makefile/</guid>
      
        <description>make工具介绍 项目构建往往要经过一系列的过程，尤其是C项目，可能需要先编译这个，再编译那个，再添加个链接，完了再打个docker镜像，会有很多的文件需要创建和更改。这些动作，我们既可以通过手工的方式，一步步完成，不免显得繁琐。或者也可以写个shell脚本自动完成。但是make是专门做这件事的。
make的环境准备 对于linux或者mac系统，只要有gcc，一般都会有make，通过命令make -v可以检查你当前的环境有没有make，而在windows上想使用make还是比较复杂的，尽管网上有很多教程，但我都没有尝试成功，推荐还是尽量在linux或者mac环境下使用make构建你的项目
make的使用 make的使用非常简单，笔者不是make大神，使用make都是通过一条 make 命令和编写一个Makefile文件即可。
Makefile的编写 Makefile中需要指明要进行哪些操作，这些操作需要有哪些前置操作，或者需要哪些前置文件，最终又生成了什么文件。</description>
      
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://yanghairui.life/contact/</link>
      <pubDate>Tue, 23 Mar 2021 22:52:05 +0800</pubDate>
      
      <guid>https://yanghairui.life/contact/</guid>
      
        <description>QQ: 941811450
gmail: horace27149@gmail.com
wechat: redamancy40520</description>
      
    </item>
    
    <item>
      <title>k8s的Informer机制</title>
      <link>https://yanghairui.life/posts/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 12 Mar 2021 23:55:43 +0800</pubDate>
      
      <guid>https://yanghairui.life/posts/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</guid>
      
        <description>Client-go client-go与其他语言版本的k8s不同的地方在于，它不仅仅是一个k8s的客户端，而且还是一个k8s的核心库，k8s中各个组件与api-server之间的通信都是通过client-go的iformer机制实现的快速无延迟的数据同步。
Informer机制 </description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://yanghairui.life/about/</link>
      <pubDate>Fri, 12 Mar 2021 23:55:16 +0800</pubDate>
      
      <guid>https://yanghairui.life/about/</guid>
      
        <description>我出生于黑龙江省海伦市，幼年在农村的姥姥家里度过；
  7岁随父母迁往双鸭山市，在这座边境小城度过了我的小学中学时光；
  我于2018年从郑州大学机械工程学院的机械工程专业毕业；
  大学里我是院足球队队员，作为混子跟着球队拿过两个冠军和一个亚军；</description>
      
    </item>
    
  </channel>
</rss>