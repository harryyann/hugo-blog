<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Website of Harry Yang</title>
    <link>https://yanghairui.life/post/</link>
    <description>Recent content in Posts on Website of Harry Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 01 Apr 2022 14:43:20 +0800</lastBuildDate><atom:link href="https://yanghairui.life/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goroutine的调度模型</title>
      <link>https://yanghairui.life/post/goroutine%E7%9A%84%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 01 Apr 2022 14:43:20 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/goroutine%E7%9A%84%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>Golang的内存分配原理</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Mon, 21 Feb 2022 18:35:14 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      
        <description>程序运行中的堆和栈 一个程序在运行中占用的内存分为以下几部分：
 栈stack：系统自动分配，存放函数的参数值，局部变量和方法调用，操作方法和数据结构中的栈类似，有栈容量，会出现溢栈现象。 堆heap：一般由程序员分配释放，程序员不释放就由OS释放（通过语言的GC），和数据结构中的堆不同，分配方式类似于链表。 全局区(静态区)static：全局变量和静态变量的存储，经过初始化的在一块区域，未初始化的在另一区域。 文字常量区：常量字符串存在这里。 程序代码区：函数体的二进制代码。  操作系统把磁盘上的可执行文件加载到内存之前，会把可执行文件中的代码，数据放在内存中合适的位置上，分配好堆栈，所有准备工作完成后程序才可以运行。内存布局如下所示：</description>
      
    </item>
    
    <item>
      <title>性能优化的分析思路</title>
      <link>https://yanghairui.life/post/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Sun, 06 Feb 2022 17:38:15 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</guid>
      
        <description>系统性能的定义   Throughput：吞吐量
  Latency：请求耗时
  Error rate：错误率</description>
      
    </item>
    
    <item>
      <title>Raft算法介绍</title>
      <link>https://yanghairui.life/post/raft%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 13 Dec 2021 19:46:27 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/raft%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      
        <description>Raft算法介绍 在分布式系统中，为了消除单点故障提高系统可用性，通常会使用副本来进行容错，但这会带来另一个问题，即如何保证多个副本之间的一致性。
强一致性 强一致性不是说所有节点在任意时刻的状态都是一致的，而是指让一个分布式系统看起来好像是个单机一样，所有操作都是原子的，不管什么故障产生，都不会让分布式系统的节点间的数据出现不一致，让应用层可以忽略底层分布式系统之间数据的同步问题，像操作一个单机一样操作这个分布式系统。
共识算法 共识算法就是用来实现强一致性的算法，可以保证在小于一半的节点发生故障时，整个系统依然是正常可用的。
共识算法是强一致性分布式系统的基石，比较有名的就是Zookeeper所使用的Paxos算法，Raft也是共识算法的一种，它是Paxos算法的一个简化版本，更易于理解和实现，被很多的分布式系统使用，比较有名的就是Etcd、Consul，TiKV等，MySQL集群中也使用到了raft算法。
Raft算法的三个核心问题 对于一个基于raft算法的分布式集群来说，当我们通过客户端向集群发起一些读写操作时，首先需要确定的是需要有一个节点对操作进行处理和响应，这个节点被称为是主节点(Leader)，其他节点就叫做从节点(Follower)。Raft算法的第一个核心问题就是选主，需要确定集群中哪个节点作为主节点。
确定了主节点后，主节点就要接收到了客户端的请求，比如接到一个写入数据的操作后，不仅需要将数据保存在本地，还要将数据分发给集群中的其他从属节点。Raft算法需要在保证集群中的大多数节点都接收到了这次操作并且完成同步之后，主节点才可以给客户端操作成功的响应。这个操作分发的过程就是日志复制，即raft算法中主节点是将操作包装成日志的形式发送给所有从节点的。</description>
      
    </item>
    
    <item>
      <title>防缓存击穿利器singleflight介绍</title>
      <link>https://yanghairui.life/post/%E9%98%B2%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E5%88%A9%E5%99%A8singleflight%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 21 Nov 2021 10:18:27 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E9%98%B2%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E5%88%A9%E5%99%A8singleflight%E4%BB%8B%E7%BB%8D/</guid>
      
        <description>缓存击穿 一般一个并发量大的服务，往往会在服务和数据库之间增加一层缓存，来减轻数据库的压力，因为数据库在高并发时往往会是整个系统的瓶颈。大概的过程就是查询时，先从缓存中查询，缓存中查不到，则从数据库中查询，并把数据回填到缓存中，再返回给用户，那么下次用户访问同一份数据时，就可以命中缓存而不用访问数据库，以此减轻数据库的压力。而在系统刚启动时一般也会采用缓存预热的方式，把数据库中的一些可能的热点数据预先加载到缓存中，以防止系统刚刚启动时数据库的压力过大。
而缓存中的key往往都需要有过期时间，当缓存中(Redis或者Memcached)的某个热点key，在承受大量并发时突然过期，导致查询这个key的所有请求穿透缓存到达数据库，增大数据库的压力，严重时甚至可能让数据库宕机，这就是缓存击穿。就像下图这样，所有请求都透传到了数据库：
解决这个问题比较重型的武器是分布式锁，即缓存miss后访问数据库需要先获取分布式锁，拿到分布式锁后才能从数据库中查到想要的数据，没拿到分布式锁就需要等待其他占有锁的线程完成从数据库中取数据和缓存的回填操作后，再从缓存中获取数据并返回。
但是这种解决方式消耗资源过大，且并且不是每个系统都需要分布式锁。singleflight就是一个解决该问题的利器。
Singleflight的使用 singleflight 库，直译过来就是单飞，这个库的主要作用就是将一组相同的请求合并成一个请求，实际上只会去请求一次，然后对所有的请求返回相同的结果即可。当并发访问数据库中某个数据时，可以通过singleflight保证在一定的时间周期内，同一个key的并发访问实际上只有一次请求真正访问数据库，以此来大大降低数据库的压力，如下图：
使用方式 首先获取这个包</description>
      
    </item>
    
    <item>
      <title>微服务概览</title>
      <link>https://yanghairui.life/post/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 06 Nov 2021 17:37:07 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/</guid>
      
        <description>微服务的演进过程 单体应用 单体应用时代有两个主流流派：
 LAMP架构：Linux系统 + Apache/Nginx服务器 + MySQL数据库 + 一种脚本语言，比如PHP，Python，Ruby，Perl等。特点是轻量级，价格低，跨平台，并且十分易于开发。 MVC架构：Model-View-Controller，例如Spring + IBatis/Hibernate + Tomcat。它有较低的耦合性，可重用性高，且部署快速的特点。  单体应用架构的优点：</description>
      
    </item>
    
    <item>
      <title>CPU的cache line和false sharding问题</title>
      <link>https://yanghairui.life/post/cpu%E7%9A%84%E7%BC%93%E5%AD%98%E8%A1%8C/</link>
      <pubDate>Fri, 15 Oct 2021 19:34:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/cpu%E7%9A%84%E7%BC%93%E5%AD%98%E8%A1%8C/</guid>
      
        <description>CPU的多级缓存 随着计算机进入多核时代，CPU处理速度和内存之间的鸿沟越来越大，因此多核CPU都通过缓存行提高CPU和内存的交互效率。CPU 缓存（Cache Memory）是位于 CPU 与内存之间的临时存储器，它的容量比内存小的多但是交换速度却比内存要快得多。在缓存中的数据是内存中的一小部分，但这一小部分是短时间内 CPU 即将访问的，当 CPU 调用大量数据时，就可避开内存直接从缓存中调用，从而加快读取速度。</description>
      
    </item>
    
    <item>
      <title>Golang的mutex底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84mutex%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 14 Oct 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84mutex%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>互斥锁 互斥锁的数据结构 互斥锁是并发程序中对一个共享资源进行访问控制的常用手段，Golang中提供了mutex作为互斥锁的实现。mutex的数据结构如下：
// 定义在src/sync/mutex.go  type Mutex struct{  state int32  sema uint32 } 包括两个字段：</description>
      
    </item>
    
    <item>
      <title>分库分表的实现方式</title>
      <link>https://yanghairui.life/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 30 Sep 2021 17:56:02 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
      
        <description>分库分表 数据库的数据量增大会直接影响读写的性能，比如一次查询操作，扫描 5 万条数据和 500 万条数据，查询速度肯定是不同的。分库分表就是把一个表拆分成多个库的多个表，这些表可以在同一个服务器上，也可以在不同的服务器上，总而言之，就是要通过拆分，减小单库单表的读写压力。
那么什么时候才需要分库分表呢？
参考阿里巴巴的《Java 开发手册》中数据库部分的建表规约： **单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。**由于不同的服务器配置、数据的存储结构都不同，所以这个数据并不确切，但可以作为一个参考。</description>
      
    </item>
    
    <item>
      <title>使用Kubebuilder编写Operator</title>
      <link>https://yanghairui.life/post/kubernetes%E7%9A%84operator/</link>
      <pubDate>Mon, 20 Sep 2021 17:39:32 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/kubernetes%E7%9A%84operator/</guid>
      
        <description>CRD和自定义控制器 在k8s的Informer机制这篇文章中我们了解了K8s的Informer机制，以及对于k8s原生资源的Informer对象的使用方式。Informer机制归根到底就是利用了kube-apiserver的ListAndWatch机制，去监听集群中特定的API对象的变更，进而去实现一些控制。而且k8s的API对象是支持拓展的，允许用户在 Kubernetes 中添加一个跟 Pod、Node 类似的、新的 API 资源类型，然后编写一个针对自定义API对象的控制器，通过Informer机制去监听这个新的API对象在集群中的变更，然后实现一些控制。这中自定义的API对象就是CRD(Custom Resource Definition)。</description>
      
    </item>
    
    <item>
      <title>Golang的channel底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 18 Sep 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>Channel的底层数据结构 channel是golang在语言层面提供的goroutine通信机制，也是我们经常使用的数据结构，它的数据结构如下：
// 在src/runtime/chan.go中定义  type hchan struct{  // 环形队列相关  qcount uint // 当前队列中剩余元素的个数  dataqsiz uint // 环形队列的长度，即可以存放的元素个数  buf unsafe.</description>
      
    </item>
    
    <item>
      <title>分布式锁的几种实现方式</title>
      <link>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 13 Sep 2021 16:00:54 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      
        <description>分布式锁 单机锁 就是本地应用的互斥锁，或者读写锁，用来锁住某个资源，先获取锁才能操作资源，为了并发安全，多个线程操作同一个资源时不会出现意外的情况，保证同一个时刻只有一个线程可以操作这个资源。
分布式锁 就是同样是某个资源，但是会有分布式的应用同时访问，同样需要保证任意时刻只有一个应用能访问这个资源，就需要使用分布式锁。
简单理解，单机锁用于进程内的多个线程争抢同一个资源，分布式锁就是系统内多个进程争抢同一个资源。
比如电商网站的秒杀，特价之类的活动，高并发下会出现成千上万人抢购一个商品的场景。系统设计时会通过限流、异步、排队等方式优化，但整体的并发还是平时的数倍以上，参加活动的商品一般都是限量库存，分布式锁就是一个防止库存超卖，避免并发问题的解决方案。
分布式锁的一般特性  互斥性：一个应用获取了锁，那么另一个应用就不能获取。这是最基本的。 可重入性：一个线程获取了这个锁之后，在持有锁的时间，依然可以再次获取到这个锁，只需要计数加1，同时释放锁时如果是已经重入的锁，只需要给计数减一即可，不用删除，该程序依然保有这个锁。 锁超时：为了防止一个线程给资源加锁之后挂掉，导致不能释放锁，其他应用迟迟不能获取这个锁，就需要给锁设置超时时间，让他自动解锁。 高效：加锁、解锁的操作要高效，这里不能成为性能瓶颈。 高可用：分布式锁要多个副本，防止单点故障后，整个分布式锁就不能用。 支持阻塞和非阻塞式的使用：当一个锁被其他线程持有时，这个线程获取锁的操作会阻塞住，直到可以获取锁，这就是阻塞。非阻塞就是获取不到锁就立刻返回，需要定时获取，或者轮询的方式直到拿到锁，直到一定时间之后，可以抛出拿不到锁的异常。 公平锁和非公平锁：公平锁就是，每个想要获取锁的线程排队，等到锁释放了，就按照先后顺序依次获得锁。非公平锁就是每次锁释放都是所以线程抢夺锁，谁先抢到是谁的，这种就可能出现某个线程长时间都拿不到锁的情况。  MySQL实现分布式锁 如果项目中本来就用了MySQL，其实就可以利用MySQL做一个分布式锁。虽然很少会使用用这种方案，但是理论上也是可行的。</description>
      
    </item>
    
    <item>
      <title>分布式事务的实现方式</title>
      <link>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Sun, 12 Sep 2021 16:00:54 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      
        <description>分布式基础理论 CAP CAP 理论可以表述为，一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition Tolerance）这三项中的两项。
 C（Consistency）：一致性，所有节点同时看到相同的数据，即每次写入，都是要保证所有节点都写入成功。 A（Availability）：可用性，任何时候，读写都是成功的，即服务总是可用的，比如稳定性可以做到三个9，四个9等，这就是对可用性的描述。 P（Partition Tolerance）：分区容错性，当部分节点故障或者网络错误时，系统仍然可用。  CAP理论用反证法很容易证明，如果CAP都满足，有分区容错P，就一定不能满足一致性C。</description>
      
    </item>
    
    <item>
      <title>Golang的指针和内存对齐</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 20 Aug 2021 19:34:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      
        <description>指针 golang中的指针种类 golang的指针类型分为三种，*类型，unsafe.Pointer，uintptr。
 *类型：普通指针类型，用于传递对象地址，不能进行指针运算。 unsafe.Pointer：通用指针类型，用于转换不同类型的指针，不能进行指针运算，不能读取内存存储的值，必须要转换到某一类型的普通指针。 uintptr：用于指针运算，GC不把uintptr当指针，uintptr无法持有对象，uintptr类型的目标会被回收。  通过以上就可以看出：
 unsafe.</description>
      
    </item>
    
    <item>
      <title>Golang中的defer、select和range的底层原理</title>
      <link>https://yanghairui.life/post/deferselect%E5%92%8Crange%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 19:34:46 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/deferselect%E5%92%8Crange%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      
        <description>Defer defer语句用于延迟函数的调用，每次defer都会把一个函数压入栈中，当前函数返回前，再把延迟的函数取出来并执行，所以多个defer语句是后写的先执行的。
几个题目 问题1：以下输出什么？ func deferFuncParameter() {  var aInt = 1   defer fmt.</description>
      
    </item>
    
    <item>
      <title>Golang的map底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84map%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 14 Jul 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84map%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>Map的底层数据结构 Golang的map数据类型底层使用的是哈希表实现，一个哈希表可以有多个哈希表节点，即bucket，一个bucket保存着map中的一个或者一组键值对。
hmap的数据结构： map的实现实际上就是runtime包里的hmap：
// 定义在src/runtime/map.go中  type hmap struct{  count int // 当前保存的元素个数  .</description>
      
    </item>
    
    <item>
      <title>Golang实现单例模式</title>
      <link>https://yanghairui.life/post/golang%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Tue, 13 Jul 2021 19:28:17 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E5%8D%95%E4%BE%8B/</guid>
      
        <description>单例模式 单例模式是保证一个类，确保在一个系统中永远只有一个实例。在go中，就是保证一个结构体，永远只有一个实例化的对象。
当一个应用程序中某个对象需要是全局唯一的，就要使用单例模式。单例模式常用在以下场景中：
 配置类 日志类 必须要以共享模式访问的资源类 需要频繁的创建和删除对象，而对象又可以复用的场景  单例模式不适用的场景：</description>
      
    </item>
    
    <item>
      <title>Golang编程模式：functional options</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84option%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 12 Jul 2021 19:28:17 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84option%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      
        <description>配置选项问题 当我们需要创建一个对象时，往往需要对这个对象的某些成员参数进行配置，比如下面这个结构体：
type Server struct {  Addr string  Port int  Protocol string  Timeout time.</description>
      
    </item>
    
    <item>
      <title>K8s的RBAC权限控制机制</title>
      <link>https://yanghairui.life/post/k8s%E7%9A%84rbac%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 25 Jun 2021 23:55:43 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/k8s%E7%9A%84rbac%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</guid>
      
        <description>RBAC(Role-Based Access Control) 基于角色的权限控制，其实只有三个最基本的概念：
 Role：角色，每个角色都定义了一组对k8s API对象的操作权限，就是一系列权限的集合 Subject：权限被作用者，即Role提供的权限要作用到的用户，人，或机器 RoleBinding：通过RoleBinding把Role和Subject绑定到一起  总之，就是通过Role来定义权限，通过Subject来认证，通过RoleBinding将Role和Subject绑定到一起，那么Subject即可拥有Role所定义的权限了。</description>
      
    </item>
    
    <item>
      <title>Docker的底层原理——Namespace和Cgroups技术</title>
      <link>https://yanghairui.life/post/docker%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 16 Jun 2021 15:18:13 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/docker%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      
        <description>Docker容器技术 容器是一种沙盒技术，可以像一个集装箱一样，把你写的应用程序包起来，这样多个应用之间就会有各自的边界而不互相干扰，而这个容器也可以随意的搬来搬去。容器在外在表现上就像一个轻量级的虚拟机，它有自己的文件系统，自己的CPU和内存大小，自己的网络栈等等，多个容器运行在同一台宿主机上，就像每个容器各自从一台物理机上切了一块一样。但是容器并不像虚拟机一样采用了虚拟化技术，而是直接在操作系统上就可以隔离出多个容器。下面这张图就是容器和虚拟机的对比图：
左侧就是虚拟机的实现原理，通过Hypervisor提供硬件虚拟化功能，模拟出一个操作系统的各种硬件状况，然后在这个虚拟的硬件上安装一个新的操作系统，也就是图上的Guest OS。
而右侧就是容器技术，可以看到容器是使用了Docker Engine替代了Hypervisor，并且不需要创建Guest OS，而是直接就构造出了多套文件目录。
那么容器技术到底是怎么实现的呢？
通过Namespace让进程&amp;quot;隔离&amp;quot; Linux系统在使用clone()或者fork()函数创建一个进程时，可以给它指定很多参数，比如CLONE_NEWPID参数，就可以在进程创建起来后，让这个进程&amp;quot;看到&amp;quot;一个全新的进程空间：</description>
      
    </item>
    
    <item>
      <title>InnoDB的非锁定一致性读</title>
      <link>https://yanghairui.life/post/innodb%E7%9A%84%E9%9D%9E%E9%94%81%E5%AE%9A%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</link>
      <pubDate>Mon, 07 Jun 2021 17:18:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/innodb%E7%9A%84%E9%9D%9E%E9%94%81%E5%AE%9A%E4%B8%80%E8%87%B4%E6%80%A7%E8%AF%BB/</guid>
      
        <description>非锁定一致性读 在《MySQL的锁》这篇文章中我介绍了MySQL的锁定一致性读，即通过加锁的方式来保证读取数据的正确性。而为了提高效率，InnoDB还实现了非锁定的一致性读，即读取操作不需要等待行锁的释放就可以完成数据读取，提高读的效率。这也是InnoDB默认的读取方式。
实现方式 InnoDB通过版本控制的方式读取当前执行时间数据库中的快照数据，快照数据是指该行之前版本的数据，如上图所示，当要读取的数据被加了X锁时，可以不等到锁释放，而是直接读取数据旧版本的快照，即可实现一致性读。而在不同的事务隔离级别下，读取数据的版本也不同，这就是行多版本技术，由此带来的并发控制，就是多版本并发控制（Multi Version Concurrency Control，MVCC）。
MVCC MVCC是一种概念，很多数据库都有自己的实现，而InnoDB的实现方式是结合自己的undo log和在表中增加了两个隐藏的字段实现的。</description>
      
    </item>
    
    <item>
      <title>MySQL的锁</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E9%94%81/</link>
      <pubDate>Sun, 06 Jun 2021 17:08:28 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E9%94%81/</guid>
      
        <description>数据库的锁 锁的作用就是确保每一个用户都能以一致的方式读取和写入数据。MySQL中的锁分为两种：闩锁latch和lock锁。
  latch：轻量级的锁，用于锁定mysql应用程序中的一些对象，要求锁定的时间必须非常短，mysql中分为mutex（互斥锁）和rwlock（读写锁），是应用程序级别的，就是我们在程序中使用的mutex和rwmutex。通过命令show engine innodb mutex可以查看，一般mysql的开发人员会关注。
通过命令show engine innodb mutex可以观察当前数据库中的latch信息。</description>
      
    </item>
    
    <item>
      <title>Redis的持久化机制</title>
      <link>https://yanghairui.life/post/redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 15 May 2021 16:52:40 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</guid>
      
        <description>Redis的持久化 Redis 的读写都是在内存中，所以它的性能较高，但在内存中的数据会随着服务器的重启而丢失，为了保证数据不丢失，我们需要将内存中的数据存储到磁盘，以便 Redis 重启时能够从磁盘中恢复原有的数据，而整个过程就叫做 Redis 持久化。
Redis的可持久化也是redis和memcached的主要区别之一，Memcached没有持久化机制。
Redis持久化的方式 快照方式RDB RDB(Redis DataBase)，某一个时刻，将当前内存中存储的所有数据形成一个快照，并以二进制形式写入磁盘。</description>
      
    </item>
    
    <item>
      <title>Docker开启TLS远程连接</title>
      <link>https://yanghairui.life/post/docker%E5%BC%80%E5%90%AFtls%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Fri, 14 May 2021 10:29:42 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/docker%E5%BC%80%E5%90%AFtls%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</guid>
      
        <description>Docker远程连接 Docker是C/S架构，通过docker的客户端连接到docker daemon，然后由docker daemon在宿主机上执行构建镜像，运行容器等指令。
Docker支持多种方式将docker客户端连接到server。如果docker客户端和server都在同一台宿主机上，那么可以直接使用Unix域套接字文件/var/run/docker.sock连接，我们直接使用docker命令时实际上就是采用这种方式进行连接的。
Docker也支持远程通过socket进行连接，可以选择开启或者不开启TLS，为了安全我们大多数时候还是采用开启TLS的方式进行远程连接。
启动远程连接的过程 首先需要保证宿主机上docker daemon已安装，安装过程可查看官网
制作证书 首先需要制作证书，包括服务端证书，和客户端证书。</description>
      
    </item>
    
    <item>
      <title>k8s的Informer机制</title>
      <link>https://yanghairui.life/post/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 12 May 2021 23:55:43 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/k8s%E6%A0%B8%E5%BF%83%E5%BA%93client-go%E7%9A%84informer%E6%9C%BA%E5%88%B6/</guid>
      
        <description>Client-go client-go与其他语言版本的k8s不同的地方在于，它不仅仅是一个k8s的客户端，而且还是k8s的核心库，k8s中各个组件与api-server之间的通信都是通过client-go的iformer机制实现的快速低延迟的数据同步。kubernetes中的各个组件和api-server之间都是通过http通信，那么需要非常高的可靠性，时效性。核心就是使用了client-go的informer机制。
Informer机制 下图是client-go中Informer机制的架构图：
最外层是一个Informer，可以看到所有功能都被封装到了Informer中，通过Informer与kube-apiserver通信，实现对API资源的list/watch（所谓ListAndWatch就是通过List获取到所有最新版本的API对象，然后再通过Watch机制监听这些API对象的变化），Informer也可以连接用户定义的eventHandler对捕获到的某些事件进行处理，还可以将watch到的更新，输出到外部，比如存到本地数据库等等。总体而言，所谓的 Informer，就是一个自带缓存和索引机制，可以触发 Handler 的客户端库。
Informer的三个组成部分 Reflector 如上图，Reflector包含一个通过clientset实现的ListerWatcher对象和一个Store对象，Reflector会通过ListerWatcher方法对api-server进行watch，通过比对resourceVersion来捕获API资源的变化，然后送入store。store是一个FIFO Queue(先入先出队列)。</description>
      
    </item>
    
    <item>
      <title>redo log的两阶段提交</title>
      <link>https://yanghairui.life/post/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Sat, 08 May 2021 07:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid>
      
        <description>WAL技术 WAL(Write-Ahead Logging)，就是先些日志，再写磁盘。
当我们向MySQL更新一条记录的时候，InnoDB存储引擎就会把记录顺序的写到redo log中，然后更新InnoDB的buffer pool，并不更新磁盘中的数据页，然后这次更新操作就算是完成了，之后InnoDB存储引擎就会在它有空的时候，把redo log中记录的记录刷到磁盘上的数据页中完成最终的持久化。
由于磁盘的顺序写入效率要远高于随机写入，并且还有组提交等优化，这种方式可以大大提高数据更新时的效率。
关于磁盘的顺序写入，需要注意一下。不是说打开一个文件之后append就是顺序写入了。顺序写入需要知道磁盘上要写入的位置，直接操作磁盘，向某个特定的地址写入，顺序写入时，磁盘的磁头不需要移动就可以直接写入，这样才有效率的提升。 Redo log Redo log是Innodb存储引擎提供的用于优化更新操作的日志。它的结构可以看成是个环形的磁盘区域。</description>
      
    </item>
    
    <item>
      <title>Innodb存储引擎的特性</title>
      <link>https://yanghairui.life/post/innodb%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 07 May 2021 14:59:14 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/innodb%E7%89%B9%E6%80%A7/</guid>
      
        <description>InnoDB存储引擎的体系架构 InnoDB存储引擎的体系架构大致如下图所示，可以看到主要包含了一系列后台线程，和一个大的缓冲池。最底层则是文件系统。
InnoDB的线程模型 InnoDB的线程主要分为Master线程、IO线程、Purge线程和Page Cleaner线程。
Master 线程 是核心的后台线程，主要负责调度其他线程，以及脏页的刷新，undo页的回收，redo log的刷新，合并缓冲区等。（版本不同做的工作不一样）
IO线程 innodb中大量使用了AIO（异步IO）来处理写请求，以提高性能，IO线程用于处理这些IO操作的回调。</description>
      
    </item>
    
    <item>
      <title>MySQL的复制</title>
      <link>https://yanghairui.life/post/mysql%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 06 May 2021 17:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E5%A4%8D%E5%88%B6/</guid>
      
        <description>复制 复制是让一台服务器的数据和其他服务器保持同步。MySQL的复制是通过binlog实现的，binlog有三种类型：
 statement：记录的就是SQL语句，优点是人类可读，并且占用空间较小，但是基于该类型binlog的复制可能会产生不一致，比如执行某个特定函数，在复制后的结果可能和之前不一样。 raw：记录的是具体的每一行的变化细节，可以保证复制的正确性，保证数据一致，但是一行一行的记录占用空间较大。实际使用中采用raw的比较多。 mixed：是statement和raw的结合，一般的语句修改都采用statement格式保存，当碰到一些可能引起复制不一致的函数时，改为采用raw保存。这样既能缩小日志占用空间，也可以保证复制的数据一致性。  复制的过程  主库产生binlog 备库的IO线程，请求主库的binlog，并将binlog保存到自己本地的中继日志relay log中 备库的sql线程读取relay log，通过重放relay log完成复制  后续会进行详细说明，大体的过程如下图：</description>
      
    </item>
    
    <item>
      <title>MySQL的事务</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Thu, 06 May 2021 12:10:47 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1/</guid>
      
        <description>事务的特性 事务就是一组原子性的SQL语句。这一组SQL语句要么全部执行成功，要么全部不执行。只要有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。事务处理系统需要包含以下四个特性(ACID)：
 原子性(atomicity)  一个事务必须被看作是不可分割的最小工作单元。不可能执行成功其中的一部分操作，要么全部提交成功，要么全部失败回滚，不能存在部分成功部分失败的状态。
 一致性(consistency)  数据库总是从一个一致性的状态，转换到另一个一致性的状态。</description>
      
    </item>
    
    <item>
      <title>Golang的slice底层实现</title>
      <link>https://yanghairui.life/post/golang%E7%9A%84slice%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 05 May 2021 20:01:29 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/golang%E7%9A%84slice%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      
        <description>Slice的底层数据结构 Golang的slice切片依托于数组实现，和数组的差别就是slice可以方便的扩容，实际使用中除了在少数情况我们明确知道数组长度时，大多数时候都是用的是slice，因为不用担心容量不够的问题。但是如果不了解它内部的实现机制，就有可能会遭遇一些莫名的现象。
slice底层结构：
// 源码位于src/runtime/slice.gotype slice struct{array unsafe.Pointerlen intcap int} array是一个unsafe.</description>
      
    </item>
    
    <item>
      <title>MySQL的索引</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 20 Apr 2021 17:39:38 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      
        <description>数据库索引 索引是一种数据结构，可以为不同的场景提供更好的性能。对于数据库来说，索引的功能就是提高数据查询的效率，但同时不可避免的也会增加数据写入的消耗，二者之间需要一个平衡，只要当查询带来的好处远远大于写入时的额外工作时，索引才是有意义的。
数据库表建立索引的主要优势：
 大大减少服务器需要扫描的数据量 索引可以帮助服务器避免排序和临时表 索引可以将随机IO变为顺序IO  常见的索引数据结构   哈希表：</description>
      
    </item>
    
    <item>
      <title>MySQL的架构和语句执行过程</title>
      <link>https://yanghairui.life/post/mysql%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Thu, 08 Apr 2021 12:09:30 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/mysql%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid>
      
        <description>MySQL的整体架构图 如上图所示，整体上看MySQL分成上下两层，上面那层是Server层，下面是存储引擎层。
Server层包含了连接器、查询缓存、解析器、优化器、执行器(有的资料中说有)等组件，，主要负责的是跨存储引擎的功能，如存储过程、触发器、视图等，内置函数也是在Server层提供的。
存储引擎层则是MyISAM、InnoDB、Memory等各种存储引擎，以插件式集成，负责数据的读写。
连接器 用于和客户端建立连接，并维持和管理连接。并在连接建立时查询用户的权限表获取到该用户的所有权限，建立连接的过程大概如下：
 首先进行TCP握手，建立TCP连接 然后进行身份认证，这一步会查询MySQL的权限表，通过后会从权限表中拿到用户的所有权限，并保存在这个连接中，后续的所有权限判断，都是基于这次查询得到的权限数据，不会再去查权限表了 通过用户的身份认证之后，连接就建立起来了  通过命令show processlist可以观察当前数据库的所有连接：</description>
      
    </item>
    
    <item>
      <title>编写Makefile</title>
      <link>https://yanghairui.life/post/%E5%AD%A6%E4%B9%A0%E7%BC%96%E5%86%99makefile/</link>
      <pubDate>Thu, 25 Mar 2021 20:45:07 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%AD%A6%E4%B9%A0%E7%BC%96%E5%86%99makefile/</guid>
      
        <description>make工具介绍 项目构建往往要经过一系列的过程，尤其是C项目，可能需要先编译这个，再编译那个，再添加个链接，完了再打个docker镜像，会有很多的文件需要创建和更改。这些动作，我们既可以通过手工的方式，一步步完成，不免显得繁琐。或者也可以写个shell脚本自动完成。但是make是专门做这件事的。
make的环境准备 对于linux或者mac系统，只要有gcc，一般都会有make，通过命令make -v可以检查你当前的环境有没有make，而在windows上想使用make还是比较复杂的，尽管网上有很多教程，但我都没有尝试成功，推荐还是尽量在linux或者mac环境下使用make构建你的项目
make的使用 make的使用非常简单，笔者不是make大神，使用make都是通过一条 make 命令和编写一个Makefile文件即可。
Makefile的编写 Makefile中需要指明要进行哪些操作，这些操作需要有哪些前置操作，或者需要哪些前置文件，最终又生成了什么文件。</description>
      
    </item>
    
  </channel>
</rss>