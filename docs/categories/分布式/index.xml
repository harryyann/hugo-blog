<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on Website of Harry Yang</title>
    <link>https://yanghairui.life/categories/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on Website of Harry Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 13 Dec 2021 19:46:27 +0800</lastBuildDate><atom:link href="https://yanghairui.life/categories/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raft算法介绍</title>
      <link>https://yanghairui.life/post/raft%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 13 Dec 2021 19:46:27 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/raft%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      
        <description>Raft算法介绍 在分布式系统中，为了消除单点故障提高系统可用性，通常会使用副本来进行容错，但这会带来另一个问题，即如何保证多个副本之间的一致性。
强一致性 强一致性不是说所有节点在任意时刻的状态都是一致的，而是指让一个分布式系统看起来好像是个单机一样，所有操作都是原子的，不管什么故障产生，都不会让分布式系统的节点间的数据出现不一致，让应用层可以忽略底层分布式系统之间数据的同步问题，像操作一个单机一样操作这个分布式系统。
共识算法 共识算法就是用来实现强一致性的算法，可以保证在小于一半的节点发生故障时，整个系统依然是正常可用的。
共识算法是强一致性分布式系统的基石，比较有名的就是Zookeeper所使用的Paxos算法，Raft也是共识算法的一种，它是Paxos算法的一个简化版本，更易于理解和实现，被很多的分布式系统使用，比较有名的就是Etcd、Consul，TiKV等，MySQL集群中也使用到了raft算法。
Raft算法的三个核心问题 对于一个基于raft算法的分布式集群来说，当我们通过客户端向集群发起一些读写操作时，首先需要确定的是需要有一个节点对操作进行处理和响应，这个节点被称为是主节点(Leader)，其他节点就叫做从节点(Follower)。Raft算法的第一个核心问题就是选主，需要确定集群中哪个节点作为主节点。
确定了主节点后，主节点就要接收到了客户端的请求，比如接到一个写入数据的操作后，不仅需要将数据保存在本地，还要将数据分发给集群中的其他从属节点。Raft算法需要在保证集群中的大多数节点都接收到了这次操作并且完成同步之后，主节点才可以给客户端操作成功的响应。这个操作分发的过程就是日志复制，即raft算法中主节点是将操作包装成日志的形式发送给所有从节点的。</description>
      
    </item>
    
    <item>
      <title>分布式锁的几种实现方式</title>
      <link>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 13 Sep 2021 16:00:54 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      
        <description>分布式锁 单机锁 就是本地应用的互斥锁，或者读写锁，用来锁住某个资源，先获取锁才能操作资源，为了并发安全，多个线程操作同一个资源时不会出现意外的情况，保证同一个时刻只有一个线程可以操作这个资源。
分布式锁 就是同样是某个资源，但是会有分布式的应用同时访问，同样需要保证任意时刻只有一个应用能访问这个资源，就需要使用分布式锁。
简单理解，单机锁用于应用内的多个线程争抢同一个资源，分布式锁就是系统内多个进程争抢同一个资源。
分布式锁的一般特性  互斥性：一个应用获取了锁，那么另一个应用就不能获取。这是最基本的。 可重入性：一个线程获取了这个锁之后，在持有锁的时间，依然可以再次获取到这个锁，只需要计数加1，同时释放锁时如果是已经重入的锁，只需要给计数减一即可，不用删除，该程序依然保有这个锁。 锁超时：为了防止一个线程给资源加锁之后挂掉，导致不能释放锁，其他应用迟迟不能获取这个锁，就需要给锁设置超时时间，让他自动解锁。 高效：加锁、解锁的操作要高效，这里不能成为性能瓶颈。 高可用：分布式锁要多个副本，防止单点故障后，整个分布式锁就不能用。 支持阻塞和非阻塞式的使用：当一个锁被其他线程持有时，这个线程获取锁的操作会阻塞住，直到可以获取锁，这就是阻塞。非阻塞就是获取不到锁就立刻返回，需要定时获取，或者轮询的方式直到拿到锁，直到一定时间之后，可以抛出拿不到锁的异常。 公平锁和非公平锁：公平锁就是，每个想要获取锁的线程排队，等到锁释放了，就按照先后顺序依次获得锁。非公平锁就是每次锁释放都是所以线程抢夺锁，谁先抢到是谁的，这种就可能出现某个线程长时间都拿不到锁的情况。  MySQL实现分布式锁 如果项目中本来就用了MySQL，其实就可以利用MySQL做一个分布式锁。虽然很少会使用用这种方案，但是理论上也是可行的。</description>
      
    </item>
    
    <item>
      <title>分布式事务的实现方式</title>
      <link>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Sun, 12 Sep 2021 16:00:54 +0800</pubDate>
      
      <guid>https://yanghairui.life/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      
        <description>分布式基础理论 CAP CAP 理论可以表述为，一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition Tolerance）这三项中的两项。
 C（Consistency）：一致性，所有节点同时看到相同的数据，即每次写入，都是要保证所有节点都写入成功。 A（Availability）：可用性，任何时候，读写都是成功的，即服务总是可用的，比如稳定性可以做到三个9，四个9等，这就是对可用性的描述 P（Partition Tolerance）：分区容错性，当部分节点故障或者网络错误时，系统仍然可用。  CAP理论用反证法很容易证明，如果CAP都满足，有分区容错P，就一定不能满足一致性C。</description>
      
    </item>
    
  </channel>
</rss>